---
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import "../style/global.css";
import Wave from "../components/Waves.tsx";
import { GoogleFontsOptimizer } from "astro-google-fonts-optimizer";
const { frontmatter } = Astro.props;
const { title, author, date, description, titles, audio } = frontmatter;
---

<!doctype html>
<html lang="en" class="min-h-screen">
  <head>
    <GoogleFontsOptimizer
      url="https://fonts.googleapis.com/css2?family=Dosis&display=swap"
    />
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="theme-color" content="#282828" />
    <meta name="generator" content={Astro.generator} />
    <meta name="geo.region" content="DZ-29" />
    <meta name="geo.placename" content="Mascara" />
    <meta name="geo.position" content="28.000027;2.999983" />
    <meta name="ICBM" content="28.000027, 2.999983" />
    <link rel="me" href="mailto:miloua23@gmail.com" />
    <script
      defer
      src="https://cloud.umami.is/script.js"
      data-website-id="6cffc891-98e4-47ae-ae07-d439df038aa8"></script>
    <!-- HTML Meta Tags -->
    <title>{title} | Miloua Mokhtar</title>
    <meta name="description" content={description} />
    <meta
      name="keywords"
      content="web development, front end developer, website development, experience, blog"
    />
    <meta name="author" content="Miloua Mokhtar" />
    <meta name="date" content={date} />

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content="https://mokhincode.com" />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content="https://mokhincode.com/ogImage.jpg" />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="mokhincode.com" />
    <meta property="twitter:url" content="https://mokhincode.com/" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta
      name="twitter:image"
      content="https://mokhincode.com/twitterImage.jpg"
    />
    <!-- ... -->
  </head>
  <body class="mx-[10px] font-dosis min-h-screen dark:bg-stone-800">
    <Header />
    <div
      class="dark:text-stone-100 dark:bg-stone-700 dark:border-stone-600 lg:w-[798px] px-4 my-4 bg-white rounded-md border shadow 2xl:w-1/2 m-auto"
    >
      <h1
        class="dark:text-stone-200 text-center text-2xl mt-6 text-black underline font-semibold"
      >
        {title}
      </h1>
      <h2 class="text-center text-lg">
        <span class="font-semibold underline">By</span>
        {author}
      </h2>
      <p class="text-center">{date}</p>
      <p class="text-lg text-center mb-4">
        {description}
      </p>
      <Wave audio={audio} client:load />
      <ul
        id="nav"
        class="absolute xl:-translate-x-[250px] xl:duration-0 duration-500 transition-all font-semibold xl:fixed"
      >
        <!-- map over the titles from the markdown files in posts -->
        {
          titles?.map((title: string) => (
            <li>
              <a
                href={`#${title.replace(/\s/g, "-")}`}
                class="text-lg inline-block no-underline transition-colors dark:text-stone-300 hover:text-foreground font-semibold text-muted-foreground"
              >
                {title}
              </a>
            </li>
          ))
        }

        <li>
          <a
            href="#Top"
            id="scrollToTopButton"
            class="hidden w-8 h-4 xl:inline-block no-underline transition-colors dark:text-stone-300 hover:text-foreground font-semibold text-muted-foreground text-lg"
            >TOP</a
          >
        </li>
      </ul>

      <div
        class="dark:text-stone-100 prose prose-p:text-xl max-w-none prose-headings:underline dark:prose-headings:text-stone-200 dark:prose-a:text-stone-300 2xl:prose-xl text-black xl:delay-100 xl:duration-500 transition-all xl:translate-y-0 translate-y-24 ease-in mb-36"
      >
        <slot />
        <!-- Markdown content is injected here -->
        <!-- ... -->
      </div>
    </div>
    <footer class="sticky top-[100vh]">
      <Footer />
    </footer>

    <script is:inline transition:persist>
      // Store the easing functions outside to avoid re-declaring them
      const easingFunctions = {
        easeOutSine: (x) => Math.sin(x * (Math.PI / 2)),
        // Add more easing functions if needed
      };

      function initScrollAnimationAndMenuControl() {
        const menu = document.querySelector("#nav");
        if (!menu) return; // Check if the menu exists

        const links = menu.querySelectorAll('a[href^="#"]');
        const speed = 1000;
        const easing = "easeOutSine";

        function scrollToY(targetY) {
          let currentTime = 0;
          const startScroll =
            window.scrollY || document.documentElement.scrollTop;

          function animateScroll() {
            currentTime += 1 / 60;
            const timeFraction = currentTime / (speed / 1000);
            const progress = easingFunctions[easing](timeFraction);

            if (timeFraction < 1) {
              window.requestAnimationFrame(animateScroll);
              window.scrollTo(
                0,
                startScroll + (targetY - startScroll) * progress,
              );
            } else {
              window.scrollTo(0, targetY);
            }
          }

          animateScroll();
        }

        function menuControl() {
          const currentScroll =
            window.scrollY || document.documentElement.scrollTop;

          links.forEach((link) => {
            const target = document.querySelector(link.getAttribute("href"));
            if (
              target &&
              target.offsetTop <= currentScroll &&
              target.offsetTop + target.clientHeight > currentScroll
            ) {
              link.classList.add("active");
            } else {
              link.classList.remove("active");
            }
          });
        }

        function handleClick(event) {
          event.preventDefault();
          const target = document.querySelector(this.hash);
          if (target) {
            scrollToY(target.offsetTop);
          }
        }

        function scrollToTop() {
          scrollToY(0);
        }

        // Clean up previous listeners to avoid multiple calls
        links.forEach((link) => link.removeEventListener("click", handleClick));
        document.removeEventListener("scroll", menuControl);

        // Attach new listeners
        links.forEach((link) => link.addEventListener("click", handleClick));
        document.addEventListener("scroll", menuControl);

        // Button or trigger to scroll to the top
        const top = document.querySelector("#scrollToTopButton");
        if (top) {
          top.removeEventListener("click", scrollToTop); // Clean up previous listener
          top.addEventListener("click", scrollToTop); // Attach new listener
        }
      }

      // Ensure the script initializes both on page load and after Astro updates
      document.addEventListener(
        "DOMContentLoaded",
        initScrollAnimationAndMenuControl,
      );
      document.addEventListener(
        "astro:after-swap",
        initScrollAnimationAndMenuControl,
      );
      document.addEventListener(
        "astro:page-load",
        initScrollAnimationAndMenuControl,
      );
    </script>

    <style is:global>
      @view-transition {
        navigation: auto; /* enabled! */
      }
      #nav li a.active {
        color: rgb(115 115 115);
      }
    </style>
  </body>
</html>
